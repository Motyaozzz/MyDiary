import React, { useState, useEffect } from 'react'
import { View, Text, Button } from 'react-native'

import AsyncStorage from '@react-native-async-storage/async-storage'

import '../../global.css'

const getNotesIds = async () => {
  try {
    /**
     * вытаскиваем все ключи хранилища
     * если ошибка выпала - выдай ошибку
     * 
     * в итоге результат будет
     * либо [ids, null]
     * либо [null, fail]
     */
    const keys = await AsyncStorage.getAllKeys()
    return [keys, null]
  } catch(e) {
    return [null, e.message]
  }
}

const getNoteById = async (id) => {
  try {
    /**
     * ну, тут тоже просто
     * вытащил по id строку из хранилища, потом распарсил её и отдал
     * если ошибка выпала - выдай ошибку
     * 
     * в итоге результат будет
     * либо [note, null]
     * либо [null, fail]
     */
    const json = await AsyncStorage.getItem(id) 
    return [JSON.parse(json), null]
  } catch(e) {
    return [null, e.message]
  }
}

const getNotesByIds = async (ids) => {
  const notes = [] // объявляешь пустой массив заметок

  for (const id of ids) {
    const [note, fail] = await getNoteById(id) // получаешь одну заметку по id
    // ну тут просто
    // если получил ошибку - пишешь вместо title, что ошибка (потом можно другую логику сделать)
    // можешь ошибочные заметки просто пропускать к хуям
    if (fail !== null) {
      notes.push({
        id,
        title: `Заметка ${id} не загружена: ${fail}`
      })
      continue
    }

    notes.push(note) // если ошибки нет - збс, клади в массив
  }

  return notes
}

const MyDiaries = () => {
  const [notes, setNotes] = useState(null)
  const [loading, setLoading] = useState(false)

  const [fail, setFail] = useState(null)

  const loadNotes = async() => {
    setFail(null) // обнуляешь ошибку, если осталась с прошлого раза (на всякий случай)
    setLoading(true) // начинаешь загрузку
    const [ids, getIdsFail] = await getNotesIds() // получаешь все идентификаторы объектов в asyncStorage
    if (getIdsFail) { // если словил ошибку - останови загрузку и покажи ошибку, потом выйди из функции
      setFail(getIdsFail)
      setLoading(false)
      return
    }
    const loadedNotes = await getNotesByIds(ids) // если получили идентификаторы - отправляем их в получение заметок
    setNotes(loadedNotes) // загруженное кладешь в state, чтобы потом показать
    setLoading(false) // прекращаешь загрузку
  }

  useEffect(() => {
    // Выполняется при первом рендере
    loadNotes() // вызываешь функцию при первом рендере компонента
  }, [])

  if (loading) {
    return <View>
      <Text>Loading</Text>
    </View>
  }

  if (fail) {
    return <View>
      <Button 
          title='Обновить'
          onPress={loadNotes}
        />
      <Text>Error: {fail}</Text>
    </View>
  }

  if (notes === null) {
    return <View>
      <Button 
          title='Обновить'
          onPress={loadNotes}
        />
      <Text>Notes is empty</Text>
    </View>
  }

  return (
    <View>
        <Button 
          title='Обновить'
          onPress={loadNotes}
        />
      { notes.map(note => {
        return <Text key={note.id}>{note.title}</Text>
      }) }
    </View>
  )
}

export default MyDiaries