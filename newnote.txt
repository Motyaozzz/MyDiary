import {useState} from 'react'
import { View, Text, Button, TextInput, StyleSheet } from 'react-native'
import React from 'react'

import AsyncStorage from '@react-native-async-storage/async-storage'

import '../../global.css'

const style = StyleSheet.create({
  view: {
    height: '100%',
    width: '100%',
  },
  text: {
    height: '5%',
    fontSize: 24
  },
  input: {
    height: '85%',
    textAlignVertical: "top"
  },
  button: {
    height: '10%',
    padding: 5,
  }
})

const getNormalizedNote = (content) => {
  const id = String((new Date()).getTime())
  const title = content.split('\n').at(0)
  const date = (new Date()).toISOString()
   console.log(id, title, content, date)
  return {
    id,
    title,
    content,
    date
  }
}

const NewNote = () => {
  const [note, setNote] = useState('')
  const [loading, setLoading] = useState(false)
  const [fail, setFail] = useState(null)

  const onNoteChange = (newValue) => {
    setNote(newValue)
  }

  const onNoteSave = async () => {
    if (note.trim() === '') {
      // Don't save empty notes
      return 
    }

    setFail(null)
    setLoading(true) // ставишь loading в true, чтобы заблочить ui
    let normalized
    try {
      normalized = getNormalizedNote(note) // конвертируешь тупой набор текста в объект, который комфортнее хранить
    } catch (e) {
      setFail(e.message)
      setLoading(false) // прекращаешь загрузку
      return
    }
    try {
      await AsyncStorage.setItem(normalized.id, JSON.stringify(normalized)) // AsyncStorage хранит строку походу, а не объекты, поэтому переводим в json и кладем в AsyncStorage
      // Операция асинхронная, поэтому await, чтобы её подождать
      // если что все операции с AsyncStorage асинхронные
    } catch (e) {
      setFail(e.message) // если словил ошибку - пишешь в ошибку
    }
    setLoading(false) // прекращаешь загрузку
  }

  if (loading) {
    return <Text>Загрузка</Text>
  }

  return (
    <View 
      // className='pt-3'
      style={style.view}
    >
      <Text 
        // className='w-10 p-2 bg-black'
        style={style.text}
      >
        NewNote
      </Text>
      {
        fail && <Text>Ошибка: {fail}</Text>
      }
      <TextInput
        value={note}
        onChangeText={onNoteChange}
        placeholder="Note..."
        style={style.input}
        multiline={true}
      />
      <Button 
        title='Add'
        style={style.button}
        onPress={onNoteSave}
      />
    </View>
  )
}

export default NewNote